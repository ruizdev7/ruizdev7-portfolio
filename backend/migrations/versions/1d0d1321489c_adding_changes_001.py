"""Adding changes 001

Revision ID: 1d0d1321489c
Revises: 6425802855d2
Create Date: 2024-12-21 10:09:04.461315

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "1d0d1321489c"
down_revision = "6425802855d2"
branch_labels = None
depends_on = None


def upgrade():
    # Handle tbl_categories changes
    with op.batch_alter_table("tbl_categories", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("CURRENT_TIMESTAMP"),
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column(
                "updated_at",
                sa.DateTime(),
                server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
                nullable=False,
            )
        )

    # Handle tbl_comment changes
    with op.batch_alter_table("tbl_comment", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "updated_at",
                sa.DateTime(),
                server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
                nullable=False,
            )
        )

    # Handle tbl_post changes
    with op.batch_alter_table("tbl_post", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "updated_at",
                sa.DateTime(),
                server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
                nullable=False,
            )
        )
        batch_op.alter_column(
            "published_at",
            existing_type=mysql.DATETIME(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.drop_column("update_at")

    # Handle tbl_user changes - rename columns instead of creating new ones
    op.execute(
        """
        ALTER TABLE tbl_user 
        CHANGE COLUMN name_user first_name VARCHAR(20) NOT NULL,
        CHANGE COLUMN middle_name_user middle_name VARCHAR(20) NULL,
        CHANGE COLUMN last_name_user last_name VARCHAR(20) NOT NULL,
        CHANGE COLUMN email_user email VARCHAR(100) NOT NULL,
        CHANGE COLUMN password_user password VARCHAR(300) NOT NULL
    """
    )

    with op.batch_alter_table("tbl_user", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=mysql.DATETIME(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        # Drop and recreate the email unique constraint
        batch_op.drop_index("email_user")
        batch_op.create_unique_constraint("unique_email", ["email"])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("tbl_user", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("last_name_user", mysql.VARCHAR(length=20), nullable=False)
        )
        batch_op.add_column(
            sa.Column("name_user", mysql.VARCHAR(length=20), nullable=False)
        )
        batch_op.add_column(
            sa.Column("email_user", mysql.VARCHAR(length=100), nullable=False)
        )
        batch_op.add_column(
            sa.Column("middle_name_user", mysql.VARCHAR(length=20), nullable=True)
        )
        batch_op.add_column(
            sa.Column("password_user", mysql.VARCHAR(length=300), nullable=False)
        )
        batch_op.drop_constraint(None, type_="unique")
        batch_op.create_index("email_user", ["email_user"], unique=False)
        batch_op.alter_column(
            "created_at", existing_type=mysql.DATETIME(), nullable=True
        )
        batch_op.drop_column("password")
        batch_op.drop_column("email")
        batch_op.drop_column("last_name")
        batch_op.drop_column("middle_name")
        batch_op.drop_column("first_name")

    with op.batch_alter_table("tbl_post", schema=None) as batch_op:
        batch_op.add_column(sa.Column("update_at", mysql.DATETIME(), nullable=False))
        batch_op.alter_column(
            "published_at", existing_type=mysql.DATETIME(), nullable=True
        )
        batch_op.drop_column("updated_at")

    with op.batch_alter_table("tbl_comment", schema=None) as batch_op:
        batch_op.drop_column("updated_at")

    with op.batch_alter_table("tbl_categories", schema=None) as batch_op:
        batch_op.drop_column("updated_at")
        batch_op.drop_column("created_at")

    # ### end Alembic commands ###
