#!/usr/bin/env python3
"""
Script para poblar la tabla de bombas con datos de prueba
"""

import sys
import os
import json
from datetime import datetime, timedelta
import random

# Establecer variables de entorno para desarrollo ANTES de importar
os.environ.setdefault("FLASK_ENV", "development")
os.environ.setdefault("JWT_SECRET_KEY", "default-jwt-secret-development")
os.environ.setdefault("SECRET_KEY", "default-secret-key-development")
os.environ.setdefault(
    "DATABASE_URL", "mysql+pymysql://root:root@localhost:3306/portfolio_app_dev"
)

# Agregar el directorio del proyecto al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from portfolio_app import create_app, db
from portfolio_app.models.tbl_pumps import Pump


def clear_all_pumps():
    """Eliminar todas las bombas existentes y sus archivos"""
    print("üóëÔ∏è Eliminando todas las bombas existentes...")

    pumps = Pump.query.all()
    count = len(pumps)

    if count == 0:
        print("üì≠ No hay bombas para eliminar")
        return True

    # Eliminar directorios de fotos y registros de base de datos
    import shutil

    deleted_count = 0

    for pump in pumps:
        try:
            # Eliminar directorio de fotos si existe
            pump_dir = pump.get_pump_directory()
            if os.path.exists(pump_dir):
                shutil.rmtree(pump_dir)
                print(f"   üìÅ Eliminado directorio: {pump_dir}")

            # Eliminar registro de la base de datos
            db.session.delete(pump)
            deleted_count += 1

        except Exception as e:
            print(f"   ‚ö†Ô∏è Error eliminando bomba {pump.id}: {e}")

    try:
        db.session.commit()
        print(f"‚úÖ {deleted_count} bombas eliminadas exitosamente")
        return True
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Error al eliminar bombas: {e}")
        return False


def create_test_pumps():
    """Crear bombas de prueba con datos realistas y variados"""

    # Datos realistas para bombas industriales (m√°ximo 20 caracteres)
    pump_models = [
        "Grundfos CR-150",
        "KSB Multitec",
        "Flygt N-3301",
        "Sulzer APT",
        "Wilo Helix V",
        "Ebara 3M",
        "Pedrollo 4CPm",
        "DAB K-55",
        "Lowara SV",
        "Calpeda MXV",
        "Pentair Aurora",
        "ITT Goulds",
        "Wilo Stratos",
        "Grundfos ALPHA2",
        "KSB Etanorm",
        "Flygt 3127",
        "Sulzer APP",
        "Wilo Yonos",
        "Ebara 3M Plus",
        "Pedrollo 4CPm+",
    ]

    locations = [
        "Edificio Principal",
        "Almac√©n A",
        "Almac√©n B",
        "Planta Producci√≥n",
        "Sala M√°quinas",
        "Sistema Riego",
        "Torre Enfriamiento",
        "Agua Potable",
        "Agua Residual",
        "Sistema Incendios",
        "Sistema HVAC",
        "Tanque 1",
        "Tanque 2",
        "Tanque 3",
        "L√≠nea 1",
        "L√≠nea 2",
        "L√≠nea 3",
        "Zona A",
        "Zona B",
        "Zona C",
        "Nivel 1",
        "Nivel 2",
        "Bloque Norte",
        "Bloque Sur",
        "Bloque Este",
        "Bloque Oeste",
        "Sector Norte",
        "Sector Sur",
        "Zona Este",
        "Zona Oeste",
    ]

    statuses = ["Active", "Maintenance", "Standby", "Repair", "Inactive", "Testing"]

    print("üîß Creando datos de prueba para bombas...")

    # Crear 50 bombas de prueba con m√°s variedad
    for i in range(1, 51):
        # Generar datos aleatorios pero realistas
        model = random.choice(pump_models)
        serial_number = f"SN{2020 + (i % 6)}{random.randint(10000, 99999)}"
        location = random.choice(locations)

        # Fechas realistas con m√°s variaci√≥n
        purchase_date = datetime.now() - timedelta(
            days=random.randint(30, 1825)  # 1 mes a 5 a√±os
        )
        last_maintenance = purchase_date + timedelta(days=random.randint(30, 365))
        next_maintenance = last_maintenance + timedelta(days=random.randint(60, 240))

        # Especificaciones t√©cnicas realistas con m√°s variedad
        pump_type = random.choice(
            ["Centr√≠fuga", "Sumergible", "Diafragma", "Perist√°ltica", "Tornillo"]
        )

        if pump_type == "Centr√≠fuga":
            flow_rate = round(random.uniform(100.0, 800.0), 1)  # L/min
            pressure = round(random.uniform(30.0, 100.0), 1)  # bar
            power = round(random.uniform(10.0, 200.0), 1)  # kW
        elif pump_type == "Sumergible":
            flow_rate = round(random.uniform(50.0, 400.0), 1)  # L/min
            pressure = round(random.uniform(20.0, 60.0), 1)  # bar
            power = round(random.uniform(5.0, 100.0), 1)  # kW
        elif pump_type == "Diafragma":
            flow_rate = round(random.uniform(20.0, 200.0), 1)  # L/min
            pressure = round(random.uniform(40.0, 120.0), 1)  # bar
            power = round(random.uniform(3.0, 50.0), 1)  # kW
        elif pump_type == "Perist√°ltica":
            flow_rate = round(random.uniform(10.0, 100.0), 1)  # L/min
            pressure = round(random.uniform(10.0, 40.0), 1)  # bar
            power = round(random.uniform(1.0, 20.0), 1)  # kW
        else:  # Tornillo
            flow_rate = round(random.uniform(200.0, 1000.0), 1)  # L/min
            pressure = round(random.uniform(15.0, 50.0), 1)  # bar
            power = round(random.uniform(15.0, 150.0), 1)  # kW

        efficiency = round(random.uniform(65.0, 95.0), 1)  # %
        voltage = random.choice([220.0, 380.0, 440.0, 480.0])  # V
        current = round(
            power * 1000 / (voltage * 1.732 * 0.85), 1
        )  # A (c√°lculo aproximado trif√°sico)
        power_factor = round(random.uniform(0.75, 0.95), 2)

        # Distribuir estados de manera m√°s realista
        status_weights = {
            "Active": 0.6,  # 60% activas
            "Standby": 0.15,  # 15% en espera
            "Maintenance": 0.1,  # 10% en mantenimiento
            "Testing": 0.05,  # 5% en pruebas
            "Repair": 0.05,  # 5% en reparaci√≥n
            "Inactive": 0.05,  # 5% inactivas
        }

        status = random.choices(
            list(status_weights.keys()), weights=list(status_weights.values())
        )[0]

        user_id = 1  # Asumiendo que existe un usuario con ID 1

        # Crear la bomba
        pump = Pump(
            model=model,
            serial_number=serial_number,
            location=location,
            purchase_date=purchase_date,
            status=status,
            flow_rate=flow_rate,
            pressure=pressure,
            power=power,
            efficiency=efficiency,
            voltage=voltage,
            current=current,
            power_factor=power_factor,
            last_maintenance=last_maintenance,
            next_maintenance=next_maintenance,
            user_id=user_id,
        )

        db.session.add(pump)

        # Mostrar progreso cada 10 bombas
        if i % 10 == 0:
            print(f"‚úÖ Creadas {i} bombas...")

    try:
        db.session.commit()
        print(f"\nüéâ ¬°{50} bombas creadas exitosamente!")
        print("\nüìä Resumen de datos generados:")
        print(f"- Total de bombas: 50")
        print(f"- Modelos √∫nicos: {len(set(pump_models))}")
        print(f"- Ubicaciones: {len(locations)}")
        print(f"- Estados: {', '.join(statuses)}")
        print(
            f"- Tipos de bomba: Centr√≠fuga, Sumergible, Diafragma, Perist√°ltica, Tornillo"
        )
        print(f"- Rango de potencia: 1-200 kW")
        print(f"- Rango de caudal: 10-1000 L/min")
        print(f"- Rango de presi√≥n: 10-120 bar")

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Error al crear bombas: {e}")
        return False

    return True


def show_pumps_summary():
    """Mostrar resumen de bombas creadas"""
    pumps = Pump.query.all()

    if not pumps:
        print("üì≠ No hay bombas en la base de datos")
        return

    print(f"\nüìã Bombas en la base de datos: {len(pumps)}")
    print("-" * 80)

    # Mostrar estad√≠sticas por estado
    status_counts = {}
    for pump in pumps:
        status_counts[pump.status] = status_counts.get(pump.status, 0) + 1

    print("üìä Distribuci√≥n por estado:")
    for status, count in status_counts.items():
        percentage = (count / len(pumps)) * 100
        print(f"   {status}: {count} ({percentage:.1f}%)")

    print("\nüîß Muestra de bombas (primeras 15):")
    print("-" * 80)

    for pump in pumps[:15]:
        print(f"üîß {pump.model} | SN: {pump.serial_number} | {pump.location}")
        print(
            f"   ÔøΩÔøΩ {pump.status} | üí° {pump.power}kW | üíß {pump.flow_rate}L/min | üìà {pump.pressure}bar"
        )
        print(
            f"   ‚ö° {pump.voltage}V | üîå {pump.current}A | üìÅ Fotos: {len(pump.get_photos_list())}"
        )
        print()

    if len(pumps) > 15:
        print(f"... y {len(pumps) - 15} bombas m√°s")


def main():
    """Funci√≥n principal del script"""
    app = create_app()

    with app.app_context():
        print("üöÄ Script de datos de prueba para bombas")
        print("=" * 50)

        if len(sys.argv) > 1:
            command = sys.argv[1]

            if command == "create":
                # Eliminar datos existentes y crear nuevos
                if clear_all_pumps():
                    create_test_pumps()
                    show_pumps_summary()
            elif command == "show":
                show_pumps_summary()
            elif command == "clear":
                clear_all_pumps()
            elif command == "reset":
                # Comando espec√≠fico para reset completo
                print("üîÑ Reseteando base de datos de bombas...")
                if clear_all_pumps():
                    create_test_pumps()
                    show_pumps_summary()
            else:
                print("‚ùå Comando no reconocido")
                print("Uso: python seed_pumps.py [create|show|clear|reset]")
        else:
            # Comportamiento por defecto: reset completo
            print("üîÑ Ejecutando reset completo de datos de bombas...")
            if clear_all_pumps():
                create_test_pumps()
                show_pumps_summary()

        print("\n‚ú® Script completado")


if __name__ == "__main__":
    # Establecer variables de entorno para desarrollo
    os.environ.setdefault("FLASK_ENV", "development")
    os.environ.setdefault("JWT_SECRET_KEY", "default-jwt-secret-development")
    os.environ.setdefault("SECRET_KEY", "default-secret-key-development")

    main()
